.data
x: .word 5, 3, 8, 2, 10   # Array x with 5 elements
y: .word 7, 1, 9, 4, 6    # Array y with 5 elements
n: .word 5                # Size of arrays

.text
main:
    addi $sp, $sp, -8       # Allocate stack for saving $ra and $s0
    sw $ra, 4($sp)          # Save return address
    sw $s0, 0($sp)          # Save $s0

    la $a0, x               # Load address of x into $a0
    la $a1, y               # Load address of y into $a1
    lw $s0, n               # Load n (size of arrays) into $s0

    lw $t1, 0($a0)          # Load x[0] into $t1 (min1)
    lw $s1, 0($a1)          # Load y[0] into $s1 (min2)
    add $t3, $zero, $zero   # i = 0

LOOP:
    slt $t4, $t3, $s0       # t4 = (i < n)
    beq $t4, $zero, END     # If i >= n, exit loop

    lw $t6, 0($a0)          # Load x[i] into $t6
    lw $t7, 0($a1)          # Load y[i] into $t7

    # Check and update min1 (for x array)
    slt $t4, $t6, $t1       # Is x[i] < min1?
    bne $t4, $zero, CHECK2  # If true, go to CHECK2
    move $t1, $t6           # Update min1 = x[i]

CHECK2:
    # Check and update min2 (for y array)
    slt $t4, $t7, $s1       # Is y[i] < min2?
    bne $t4, $zero, NEXT    # If true, skip to NEXT
    move $s1, $t7           # Update min2 = y[i]

NEXT:
    addi $t3, $t3, 1        # i++
    addi $a0, $a0, 4        # Increment x pointer (x[i+1])
    addi $a1, $a1, 4        # Increment y pointer (y[i+1])
    j LOOP                  # Jump back to LOOP

END:
    add $t5, $t1, $s1       # t5 = min1 + min2

    # Print result
    li $v0, 1               # Syscall for print integer
    move $a0, $t5           # Move t5 (result) to $a0
    syscall

    # Exit program
    lw $s0, 0($sp)          # Restore $s0
    lw $ra, 4($sp)          # Restore return address
    addi $sp, $sp, 8        # Restore stack pointer
    jr $ra                  # Return

	
