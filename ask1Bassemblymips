.data
AddrConstant5381: .word 5381   # Store the constant 5381 in memory
result_msg: .asciiz "Hash result: "  # Message for output

.text
main:
    li $t0, 7    # Initialize input value to 3 (you can change this value to test)
    jal fun                 # Call the hash function

    # Print the result after the function returns
    li $v0, 4               # Syscall: print string
    la $a0, result_msg      # Load address of result message
    syscall

    li $v0, 1               # Syscall: print integer
    move $a0, $t5          # Move result (hash) from $t1 to $a0 for printing
    syscall

    li $v0, 10              # Syscall: exit
    syscall

fun:  
    addi $sp, $sp, -8       # Stack space for $ra and $t0
    sw $ra, 4($sp)          # Save return address
    sw $t0, 0($sp)          # Save input ($t0)
 
    lw $t1, AddrConstant5381 # $t1 = hash = 5381
 
LOOP: 
    beq $t0, $zero, END     # Exit loop if input ($t0) == 0
    andi $t2, $t0, 0xFF     # $t2 = c = input & 0xFF
    sll $t3, $t1, 4         # $t3 = hash << 4
    add $t4, $t3, $t1       # $t4 = (hash << 4) + hash
    add $t5, $t4, $t2       # $t1 = ((hash << 4) + hash) + c
    srl $t0, $t0, 8         # Update input ($t0) = input >> 8
    j LOOP                  # Repeat the loop

END: 
    move $v0, $t5           # Move final hash to $v0 (return value)
    lw $t0, 0($sp)          # Restore input ($t0)
    lw $ra, 4($sp)          # Restore return address
    addi $sp, $sp, 8        # Restore stack
    jr $ra                  # Return to caller
 
