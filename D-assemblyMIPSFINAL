.data
AddrConstant5381: .word 5381   # Store the constant 5381 in memory
data_array: .word 3, 4, 5, 6
array_size: .word 4
tree: .space 16 
.text
main: 

la $a0, data_array
la $a1, array_size
la $a2, tree

create_leaves:
move $t0, $zero #i = 0 

LOOP1:
slt $t1, $t0, $a1 # set t1=1 if t0<a1 else t1=0
beq $t1, $zero, END1# go to end if t1=0
sll $t2, $t0, 2 # t2=i*4 // address_offset 
add $t2, $t2, $a0 #t2 = address of data_array[i]
lw $t3, 0($t2) # temporary register t3 = data_array[i] 
li $v0, 1
move $a0, $t3
syscall
jal cslab_hash
sw $t6, 0($a2) #store hash value in a2 -tree 
addi $a0, $a0, 4 #data_array++
addi $a2, $a2, 4 #tree++
addi $t0, $t0, 1 #i++
j LOOP1
 END1:
 jr $ra

create_Merkle_Tree: 
move $t1, $a1
div $t1, $t1, 1 #level_ops=num_od_leaves/2
sll $t2, $a1, 2 #num_of_leaves *4
add $t3, $a0, $t2  # tail = tree + (num_of_leaves * 4)
move $t0, $zero #i =0
            
LOOP2:
beq $t1, $zero END2
move $t2, $zero #j= m0

LOOPJ:
slt $t4, $t2, $t1
beq $t4, ENDJ
sll $t5, $t0, 2

sll $t5, $t0, 2 #offset = i*4
add $t5, $a0, $t5 #adress of tree
lw $t6, 0($t5) #load tree[i] into t6
lw $t7, 4($t5) #load tree[i+1] into t7
xor $t8, $t6, $t7 #xor value

move $a0, $t8
jal cslab_hash
move $t9, $v0
sw $t9, 0($t3) # *tail=hash(xored val)
addi $t3, $t3, 4
addi $t0, $t0, 2 # i += 2
addi $t2, $t2, 1 # j++
j LOOPJ

ENDJ: 
srl $t1, $t1, 1            # level_ops = level_ops /2   
move $t0, $zero

END2: 
sub $t3, $t3, 4 # move tail back to last hash
lw $v0, 0($t3)  # return the value at *(tail - 1)
jr $ra


cslab_hash:
    lw $t9, AddrConstant5381       # Load constant 5381 into $t9 (hash)
 
LOOP:
    beq $t3, $zero, END             # If input (t3) is 0, go to END
    andi $t4, $t3, 0xFF            # c(t4) = input(t3) & 0xFF
    sll $t5, $t9, 4                # t5 = left shift hash(t9) by 4 bits
    add $t6, $t5, $t9              # hash = (hash << 4) + hash
    add $t6, $t6, $t4              # hash = ((hash << 4) + hash) + c(t4)
    srl $t3, $t3, 8                # update input (t3) by right shifting 8 bits
    li $v0, 1           # Load syscall code for printing an integer
    move $a0, $t6       # Move the hash result into $a0
    syscall
    move $t3, $zero
    j LOOP                            # Repeat the loop
  
END:
    move $v0, $t6                  # Move the final hash result into $v0 to return it
    jr $ra                         # Return to the caller


    
    

