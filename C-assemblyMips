data
AddrConstant5381: .word 5381   # Store the constant 5381 in memory
data_array: .word 3, 4, 5, 6
array_size: .word 4
tree: .space 16 
.text
main: 

la $a0, data_array
lw $t6, array_size
la $a2, tree
move $t1, $zero #i = 0 

create_leaves: 


LOOP:

slt $t2, $t1, $t6
beq $t2, $zero, END
move $t0, $a0, #copy the addy of data_arra
jal cslab_hash
sw $a3, 0($a2)

addi $a0, $a0, 4
addi $a2, $a2, 4
addi $t1, $t1, 1
move $a3, $v0

j LOOP 

END: 
jr $ra

 cslab_hash:
 addi $sp, $sp -8 # stack for 2 items
 sw $ra, 4($sp) #save addy
 sw $t0, 0($sp) #save imput 
 
 lw $t1, AddrConstant5381 # t1 = hash = 5381
 
 LOOP1: 
 beq $t0, $zero, END1 #go to END if imput(t0) = 0
 andi $t2, $t0, 0xFF # c(t2) = imput(t0) & OxFF
 sll $t3,$t1, 4 #t3 = left shift hash by 4 bits
 add $t4, $t3, $t1 # hash << 4 + hash  
 add $t5, $t4, $t2 #hash = ((hash << 4) + hash) + c;
 srl $t0, $t0, 8 # update t0 = right shift c by 8 bits
 #move $s0, $t5 # move t3 to s0

 j LOOP1  
 
 END1:
 move $v0, $t5 # move t5 to v0 and returne
 
 move $a0, $v0
 li $v0, 1
 syscall 
 
 lw $t0, 0($sp)
 lw $ra, 4($sp)
 addi $sp, $sp 8
 jr $ra # return to caller 


